let
    Source = Sql.Database("scctsr44\sqlsystems", "servicedesk_db", [Query="SELECT #(lf)    ""wo"".""WORKORDERID"" AS ""Request ID"",#(lf)    ""std"".""STATUSNAME"" AS ""Status"",#(lf)    ""mdd"".""MODENAME"" AS ""Request Mode"", #(lf)    ""ti"".""FIRST_NAME"" AS ""Technician"", #(lf)    ""cd"".""CATEGORYNAME"" AS ""Category"", #(lf)    ""cri"".""FIRST_NAME"" AS ""Created By"", #(lf)    ""dpt"".""DEPTNAME"" AS ""Department"", #(lf)    ""wotodesc"".""FULLDESCRIPTION"" AS ""Description"", #(lf)    ""qd"".""QUEUENAME"" AS ""Group"", #(lf)    ""aau"".""FIRST_NAME"" AS ""Requester"", #(lf)    ""wo"".""TITLE"" AS ""Subject"", #(lf)    ""wos"".""ASSIGNEDTIME"" AS ""Assigned Time"", #(lf)    ""serdef"".""NAME"" AS ""Service Category"", #(lf)    ""wo"".""CREATEDTIME"" AS ""Created Time"",#(lf)    ""wo"".""COMPLETEDTIME"" AS ""Completed Time"",#(lf)    ""raf1"".""UDF_DATE1"" AS ""From"", #(lf)    ""raf1"".""UDF_DATE2"" AS ""To"" ,#(lf)    ""Request_UDF_PickListValues_UDF_PICK7"".""VALUE"" AS ""Planned(Y/N)""#(lf)#(lf)FROM ""WorkOrder"" ""wo""#(lf)LEFT JOIN ""ModeDefinition"" ""mdd"" ON ""wo"".""MODEID"" = ""mdd"".""MODEID""#(lf)LEFT JOIN ""SDUser"" ""sdu"" ON ""wo"".""REQUESTERID"" = ""sdu"".""USERID""#(lf)LEFT JOIN ""AaaUser"" ""aau"" ON ""sdu"".""USERID"" = ""aau"".""USER_ID""#(lf)LEFT JOIN ""DepartmentDefinition"" ""dpt"" ON ""wo"".""DEPTID"" = ""dpt"".""DEPTID""#(lf)LEFT JOIN ""WorkOrderStates"" ""wos"" ON ""wo"".""WORKORDERID"" = ""wos"".""WORKORDERID""#(lf)LEFT JOIN ""CategoryDefinition"" ""cd"" ON ""wos"".""CATEGORYID"" = ""cd"".""CATEGORYID""#(lf)LEFT JOIN ""SDUser"" ""td"" ON ""wos"".""OWNERID"" = ""td"".""USERID""#(lf)LEFT JOIN ""AaaUser"" ""ti"" ON ""td"".""USERID"" = ""ti"".""USER_ID""#(lf)LEFT JOIN ""StatusDefinition"" ""std"" ON ""wos"".""STATUSID"" = ""std"".""STATUSID""#(lf)LEFT JOIN ""WorkOrder_Queue"" ""woq"" ON ""wo"".""WORKORDERID"" = ""woq"".""WORKORDERID""#(lf)LEFT JOIN ""Request_Additional_Fields_1"" ""raf1"" ON ""wo"".""WORKORDERID""=""raf1"".""WORKORDERID""#(lf)LEFT JOIN ""QueueDefinition"" ""qd"" ON ""woq"".""QUEUEID"" = ""qd"".""QUEUEID""#(lf)LEFT JOIN ""SDUser"" ""crd"" ON ""wo"".""CREATEDBYID"" = ""crd"".""USERID""#(lf)LEFT JOIN ""AaaUser"" ""cri"" ON ""crd"".""USERID"" = ""cri"".""USER_ID""#(lf)LEFT JOIN ""WorkOrderToDescription"" ""wotodesc"" ON ""wo"".""WORKORDERID"" = ""wotodesc"".""WORKORDERID""#(lf)LEFT JOIN ""Request_Additional_Fields_2"" ""raf2"" ON ""wo"".""WORKORDERID""=""raf2"".""WORKORDERID"" #(lf)LEFT JOIN ""Request_UDF_PickListValues"" ""Request_UDF_PickListValues_UDF_PICK7"" ON ""raf2"".""UDF_PICK7""=""Request_UDF_PickListValues_UDF_PICK7"".""PickListID"" #(lf)LEFT JOIN ""ServiceDefinition"" ""serdef"" ON ""wo"".""SERVICEID"" = ""serdef"".""SERVICEID""#(lf)WHERE #(lf)    #(lf)#(tab)(#(lf)        (#(lf)            ""qd"".""QUEUENAME"" = N'IFS' OR ""qd"".""QUEUENAME"" = N'IFS Group' OR ""qd"".""QUEUENAME"" =N'Information Security' OR ""qd"".""QUEUENAME""=N'Infrastructure' OR ""qd"".""QUEUENAME""=N'Infrastructure Group' OR ""qd"".""QUEUENAME"" = N'IT-DB' OR ""qd"".""QUEUENAME""=N'IT-Development' OR ""qd"".""QUEUENAME""=N'IT-Support' OR ""qd"".""QUEUENAME""=N'IT-Systems' OR ""qd"".""QUEUENAME"" = N'IT-Systems Group'OR ""qd"".""QUEUENAME"" = N'IT-TOS'OR ""qd"".""QUEUENAME"" = N'Mobile Service'OR ""qd"".""QUEUENAME"" = N'Pending Accounts'OR ""qd"".""QUEUENAME"" = N'Physical Security'OR ""qd"".""QUEUENAME"" = N'Printing Service'OR ""qd"".""QUEUENAME"" = N'SCCT- IT Staff'#(lf)        ) #(lf)        AND #(lf)        (#(lf)            (#(lf)                ""wo"".""CREATEDTIME"" >= 1635689600000 AND  -- Start of 2024 (2024-01-01 00:00:00)#(lf)                ""wo"".""CREATEDTIME"" <= 1930297599000 AND  -- End of 2027 (2027-12-31 23:59:59)#(lf)                ""wo"".""CREATEDTIME"" != 0 AND #(lf)                ""wo"".""CREATEDTIME"" IS NOT NULL AND #(lf)                ""wo"".""CREATEDTIME"" != -1#(lf)            )#(lf)        )#(lf)    ) #(lf)    AND ""wo"".""ISPARENT"" = '1'#(lf)#(tab);#(lf)"]),
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Created Time", type number}, {"Completed Time", type number}}),
    #"Added Custom" = Table.AddColumn(#"Changed Type", "CreatedTime", each #datetime(1970, 1, 1, 0, 0, 0) + #duration(0, 0, 0, [Created Time] / 1000)),
    #"Changed Type with Locale" = Table.TransformColumnTypes(#"Added Custom", {{"CreatedTime", type datetime}}, "en-US"),
    #"Removed Columns" = Table.RemoveColumns(#"Changed Type with Locale",{"Created Time"}),
    #"Added Custom1" = Table.AddColumn(#"Removed Columns", "CompletedTime", each #datetime(1970, 1, 1, 0, 0, 0) + #duration(0, 0, 0, [Completed Time] / 1000)),
    #"Changed Type with Locale1" = Table.TransformColumnTypes(#"Added Custom1", {{"CompletedTime", type datetime}}, "en-US"),
    #"Removed Columns1" = Table.RemoveColumns(#"Changed Type with Locale1",{"Completed Time"}),
    #"Changed Type with Locale2" = Table.TransformColumnTypes(#"Removed Columns1", {{"CreatedTime", type datetime}}, "en-US"),
    #"Added Custom2" = Table.AddColumn(#"Changed Type with Locale2", "FromDate", each if [From] = null or [From] <= 0 then null else 
  #datetime(1970, 1, 1, 0, 0, 0) + #duration(0, 0, 0, Number.RoundDown([From] / 1000))),
    #"Changed Type1" = Table.TransformColumnTypes(#"Added Custom2",{{"FromDate", type datetime}}),
    #"Added Custom3" = Table.AddColumn(#"Changed Type1", "ToDate", each if [To] = null or [To] <= 0 then null else 
  #datetime(1970, 1, 1, 0, 0, 0) + #duration(0, 0, 0, Number.RoundDown([To] / 1000))),
    #"Changed Type2" = Table.TransformColumnTypes(#"Added Custom3",{{"ToDate", type datetime}}),
    #"Removed Columns2" = Table.RemoveColumns(#"Changed Type2",{"From", "To"}),
    #"Added Custom4" = Table.AddColumn(#"Removed Columns2", "Incident_Resolution_Time", each if [FromDate] = null or [ToDate] = null then null else [ToDate] - [FromDate]),
    #"Added Custom5" = Table.AddColumn(#"Added Custom4", "Formatted Resolution_Incident_Time", each if [Incident_Resolution_Time] = null then null 
  else Text.From(Duration.Days([Incident_Resolution_Time])) & "d " & 
       Text.PadStart(Text.From(Duration.Hours([Incident_Resolution_Time])), 2, "0") & "h:" & 
       Text.PadStart(Text.From(Duration.Minutes([Incident_Resolution_Time])), 2, "0") & "m:" & 
       Text.PadStart(Text.From(Duration.Seconds([Incident_Resolution_Time])), 2, "0") & "s"),
    #"Renamed Columns" = Table.RenameColumns(#"Added Custom5",{{"Formatted Resolution_Incident_Time", "Elapsed Time"}})
in
    #"Renamed Columns"
